package com.issatso.springcrypt.controleurs;

import com.issatso.springcrypt.entites.User;
import com.issatso.springcrypt.depot.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class UserController {

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;


    @GetMapping(path="/user")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping("/user")
    public ResponseEntity<Object> create(@Valid @RequestBody User user) {
        userRepository.save(user);

        return ResponseEntity.accepted().body(user);

    }

    @GetMapping("/user/{id}")
    public ResponseEntity<Object> getById(@PathVariable(value = "id") int userId) {
        Optional<User> user =  userRepository.findById(userId);
        if (user.isPresent()) return ResponseEntity.ok(user);
        return ResponseEntity.notFound().build();
    }

    @PutMapping("/user/{id}")
    public ResponseEntity<Object> update(@RequestBody User user, @PathVariable int id) {

        Optional<User> optional = userRepository.findById(id);

        if (!optional.isPresent())
            return ResponseEntity.notFound().build();

        user.setId_utilisateur(id);

        userRepository.save(user);

        return ResponseEntity.ok(user);
    }

    @DeleteMapping("/user/{id}")
    public ResponseEntity<Object> delete(@PathVariable(value = "id") int userId) {

        Optional<User> user = userRepository.findById(userId);
        if (user.isPresent()){
            userRepository.delete(user.get());
            return ResponseEntity.ok().build();
        }
        return ResponseEntity.notFound().build();

    }
}